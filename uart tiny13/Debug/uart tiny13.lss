
uart tiny13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800060  00800060  0000028a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a0  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000451  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000434  00000000  00000000  00000e39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000364  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000124  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	75 c0       	rjmp	.+234    	; 0xee <__vector_1>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__vector_6>
   e:	3f c0       	rjmp	.+126    	; 0x8e <__vector_7>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a5 36       	cpi	r26, 0x65	; 101
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	bf d0       	rcall	.+382    	; 0x1ac <main>
  2e:	f1 c0       	rjmp	.+482    	; 0x212 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_6>:
	}
	else
	{
		return (-1);		// Иначе возвращаем -1 (принимать нечего)
	}
}
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	2f 93       	push	r18
  3e:	8f 93       	push	r24
  40:	9f 93       	push	r25
  42:	28 b3       	in	r18, 0x18	; 24
  44:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <txbyte>
  48:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <txbyte+0x1>
  4c:	92 2f       	mov	r25, r18
  4e:	9e 7f       	andi	r25, 0xFE	; 254
  50:	81 70       	andi	r24, 0x01	; 1
  52:	89 2b       	or	r24, r25
  54:	88 bb       	out	0x18, r24	; 24
  56:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <txbyte>
  5a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <txbyte+0x1>
  5e:	96 95       	lsr	r25
  60:	87 95       	ror	r24
  62:	90 58       	subi	r25, 0x80	; 128
  64:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <txbyte+0x1>
  68:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <txbyte>
  6c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <txbitcount>
  70:	88 23       	and	r24, r24
  72:	29 f0       	breq	.+10     	; 0x7e <__DATA_REGION_LENGTH__+0x3e>
  74:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <txbitcount>
  78:	81 50       	subi	r24, 0x01	; 1
  7a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <txbitcount>
  7e:	9f 91       	pop	r25
  80:	8f 91       	pop	r24
  82:	2f 91       	pop	r18
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <__vector_7>:
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	8f 93       	push	r24
  9a:	9f 93       	push	r25
  9c:	b1 9b       	sbis	0x16, 1	; 22
  9e:	05 c0       	rjmp	.+10     	; 0xaa <__stack+0xb>
  a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <rxbyte>
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <rxbyte>
  aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	81 11       	cpse	r24, r1
  b6:	0d c0       	rjmp	.+26     	; 0xd2 <__stack+0x33>
  b8:	89 b7       	in	r24, 0x39	; 57
  ba:	87 7f       	andi	r24, 0xF7	; 247
  bc:	89 bf       	out	0x39, r24	; 57
  be:	88 b7       	in	r24, 0x38	; 56
  c0:	88 60       	ori	r24, 0x08	; 8
  c2:	88 bf       	out	0x38, r24	; 56
  c4:	8a b7       	in	r24, 0x3a	; 58
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8a bf       	out	0x3a, r24	; 58
  ca:	8b b7       	in	r24, 0x3b	; 59
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	8b bf       	out	0x3b, r24	; 59
  d0:	07 c0       	rjmp	.+14     	; 0xe0 <__stack+0x41>
  d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <rxbyte>
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	95 95       	asr	r25
  da:	87 95       	ror	r24
  dc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <rxbyte>
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_1>:
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
  fa:	89 e0       	ldi	r24, 0x09	; 9
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 100:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <rxbyte>
 104:	82 b7       	in	r24, 0x32	; 50
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	20 f4       	brcc	.+8      	; 0x112 <__vector_1+0x24>
 10a:	82 b7       	in	r24, 0x32	; 50
 10c:	8c 5f       	subi	r24, 0xFC	; 252
 10e:	89 bd       	out	0x29, r24	; 41
 110:	03 c0       	rjmp	.+6      	; 0x118 <__vector_1+0x2a>
 112:	82 b7       	in	r24, 0x32	; 50
 114:	84 50       	subi	r24, 0x04	; 4
 116:	89 bd       	out	0x29, r24	; 41
 118:	8b b7       	in	r24, 0x3b	; 59
 11a:	8f 7b       	andi	r24, 0xBF	; 191
 11c:	8b bf       	out	0x3b, r24	; 59
 11e:	88 b7       	in	r24, 0x38	; 56
 120:	8c 60       	ori	r24, 0x0C	; 12
 122:	88 bf       	out	0x38, r24	; 56
 124:	89 b7       	in	r24, 0x39	; 57
 126:	88 60       	ori	r24, 0x08	; 8
 128:	89 bf       	out	0x39, r24	; 57
 12a:	8f 91       	pop	r24
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <_Z9uart_sendh>:
 136:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <txbitcount>
 13a:	91 11       	cpse	r25, r1
 13c:	fc cf       	rjmp	.-8      	; 0x136 <_Z9uart_sendh>
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	9a 95       	dec	r25
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <txbyte+0x1>
 14a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <txbyte>
 14e:	8a e0       	ldi	r24, 0x0A	; 10
 150:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <txbitcount>
 154:	08 95       	ret

00000156 <_Z9uart_initv>:
*	Инициализирует глобальные переменные и регистры микроконтроллера.
*/

void uart_init()
{
	txbyte = 0xFFFF;		// Значение буфера на передачу - все единицы
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	9f ef       	ldi	r25, 0xFF	; 255
 15a:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <txbyte+0x1>
 15e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <txbyte>
	rxbyte = 0x00;			// Значение буфера на прием - все нули
 162:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <rxbyte>
	txbitcount = 0x00;		// Значение счетчика преедаваемых бит - ноль (ничего пока не передаем)
 166:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <txbitcount>
	rxbitcount = 0x09;		// Значение счетчика бит на прием - 9 (ожидаем возможного приема)
 16a:	99 e0       	ldi	r25, 0x09	; 9
 16c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	TXDDR |= (1 << TXD);		// Задаем направление порта на передачу как выход
 170:	87 b3       	in	r24, 0x17	; 23
 172:	81 60       	ori	r24, 0x01	; 1
 174:	87 bb       	out	0x17, r24	; 23
	RXDDR &= ~(1 << RXD);		// Задаем направление порта на прием как вход
 176:	87 b3       	in	r24, 0x17	; 23
 178:	8d 7f       	andi	r24, 0xFD	; 253
 17a:	87 bb       	out	0x17, r24	; 23
	TXPORT |= (1 << TXD);		// Пишем единицу в выход TXD
 17c:	88 b3       	in	r24, 0x18	; 24
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	88 bb       	out	0x18, r24	; 24
	RXPORT |= (1 << RXD);		// Подтягиваем к единице вход RXD
 182:	86 b3       	in	r24, 0x16	; 22
 184:	82 60       	ori	r24, 0x02	; 2
 186:	86 bb       	out	0x16, r24	; 22
	OCR0A = BAUD_DIV;			// Задаем значение регистра OCR0A в соответствии с бодрейтом
 188:	96 bf       	out	0x36, r25	; 54
	TIMSK0 |= (1 << OCIE0A);	// Разрешаем прерывание TIM0_COMPA
 18a:	89 b7       	in	r24, 0x39	; 57
 18c:	84 60       	ori	r24, 0x04	; 4
 18e:	89 bf       	out	0x39, r24	; 57
	TCCR0A |= (1 << WGM01);		// Режим таймера CTC (очистка TCNT0 по достижению OCR0A)
 190:	8f b5       	in	r24, 0x2f	; 47
 192:	82 60       	ori	r24, 0x02	; 2
 194:	8f bd       	out	0x2f, r24	; 47
	TCCR0B |= T_DIV;			// Задаем скорость счета таймера в соответствии с делителем
 196:	83 b7       	in	r24, 0x33	; 51
 198:	82 60       	ori	r24, 0x02	; 2
 19a:	83 bf       	out	0x33, r24	; 51
	MCUCR |= (1 << ISC01);		// Задаем прерывание INT0 по заднему фронту импульса
 19c:	85 b7       	in	r24, 0x35	; 53
 19e:	82 60       	ori	r24, 0x02	; 2
 1a0:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0);		// Разрешаем прерывание INT0
 1a2:	8b b7       	in	r24, 0x3b	; 59
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	8b bf       	out	0x3b, r24	; 59
	sei();						// Разрешаем прерывания глобально
 1a8:	78 94       	sei
 1aa:	08 95       	ret

000001ac <main>:
}

int main(void)
{
	OSCCAL=0xDE; // (6B6E=E5); (6B6C=E4); (6363=DD);(6364=DE||DB); (5858=D2); (5A57=D3); (6165=DB); (676B=E3); (5E5E=D6);  (6=DB||D9);  
 1ac:	8e ed       	ldi	r24, 0xDE	; 222
 1ae:	81 bf       	out	0x31, r24	; 49
	// (5||5453=CA); (5D5C=D7); (5A5B=D3); (615F=D8); (5F5E=DA); (6566=E1||DD); (6E74=EB); (534F=CC);(686B=E3);(5756=D1||D0||CD);(5B5C=D4); 
	//(5B5B=D2);(5F5F=D5);(6464=DC||DD);(6567=E0);(5A58=D1||D3);(5755=CE); (5C5B=D3);(6667=DF);(686A=E3); (5=C9); (6267=DE); (5655=CF);
	//(5857=D1); (6466=DE);(4A47=C2);(6668=E1); (5754=D1);(6564=DE);(5454=CA); (595A=D3);(5B57=D2); (6163=D9);(5959=D2); (5E6=D7);
	// (5352=CD); (6265=DC); (6E72=E9);(4F4C=C6); (5D5B=D4); (6264=DA); (5E5D=D5); (5757=D0); (5453=C7); (5656=C9);(5D5D=D4); (6367=DE);
	//(6768=E3); (5D5F);
	uart_init();
 1b0:	d2 df       	rcall	.-92     	; 0x156 <_Z9uart_initv>
    /* Replace with your application code */
	
    while (1) 
    {
		uart_send(0x5A); 
 1b2:	8a e5       	ldi	r24, 0x5A	; 90
 1b4:	c0 df       	rcall	.-128    	; 0x136 <_Z9uart_sendh>
		uart_send(0xA5); 
 1b6:	85 ea       	ldi	r24, 0xA5	; 165
 1b8:	be df       	rcall	.-132    	; 0x136 <_Z9uart_sendh>
		uart_send(0x00); 
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	bc df       	rcall	.-136    	; 0x136 <_Z9uart_sendh>
		uart_send(0x20); 
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	ba df       	rcall	.-140    	; 0x136 <_Z9uart_sendh>
		uart_send(0x22); 
 1c2:	82 e2       	ldi	r24, 0x22	; 34
 1c4:	b8 df       	rcall	.-144    	; 0x136 <_Z9uart_sendh>
		uart_send(0x5A);
 1c6:	8a e5       	ldi	r24, 0x5A	; 90
 1c8:	b6 df       	rcall	.-148    	; 0x136 <_Z9uart_sendh>
		uart_send(0x00); 
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	b4 df       	rcall	.-152    	; 0x136 <_Z9uart_sendh>
		uart_send(0x63);  
 1ce:	83 e6       	ldi	r24, 0x63	; 99
 1d0:	b2 df       	rcall	.-156    	; 0x136 <_Z9uart_sendh>
		uart_send(0xFF);  
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	b0 df       	rcall	.-160    	; 0x136 <_Z9uart_sendh>
		uart_send(0x5A); 
 1d6:	8a e5       	ldi	r24, 0x5A	; 90
 1d8:	ae df       	rcall	.-164    	; 0x136 <_Z9uart_sendh>
		uart_send(0xA5);
 1da:	85 ea       	ldi	r24, 0xA5	; 165
 1dc:	ac df       	rcall	.-168    	; 0x136 <_Z9uart_sendh>
		uart_send(0x01); 
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	aa df       	rcall	.-172    	; 0x136 <_Z9uart_sendh>
		uart_send(0x20);
 1e2:	80 e2       	ldi	r24, 0x20	; 32
 1e4:	a8 df       	rcall	.-176    	; 0x136 <_Z9uart_sendh>
		uart_send(0x22);
 1e6:	82 e2       	ldi	r24, 0x22	; 34
 1e8:	a6 df       	rcall	.-180    	; 0x136 <_Z9uart_sendh>
		uart_send(0x01);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	a4 df       	rcall	.-184    	; 0x136 <_Z9uart_sendh>
		uart_send(0x30);
 1ee:	80 e3       	ldi	r24, 0x30	; 48
 1f0:	a2 df       	rcall	.-188    	; 0x136 <_Z9uart_sendh>
		uart_send(0x0C);
 1f2:	8c e0       	ldi	r24, 0x0C	; 12
 1f4:	a0 df       	rcall	.-192    	; 0x136 <_Z9uart_sendh>
		uart_send(0x7F);
 1f6:	8f e7       	ldi	r24, 0x7F	; 127
 1f8:	9e df       	rcall	.-196    	; 0x136 <_Z9uart_sendh>
		uart_send(0xFF);
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	9c df       	rcall	.-200    	; 0x136 <_Z9uart_sendh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	86 e7       	ldi	r24, 0x76	; 118
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	21 50       	subi	r18, 0x01	; 1
 206:	80 40       	sbci	r24, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0x58>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x62>
 20e:	00 00       	nop
 210:	d0 cf       	rjmp	.-96     	; 0x1b2 <main+0x6>

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
